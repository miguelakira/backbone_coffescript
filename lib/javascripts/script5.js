// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function() {
    var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;

    window.Item = (function(_super) {
      __extends(Item, _super);

      function Item() {
        _ref = Item.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Item.prototype.defaults = {
        part1: 'Hello',
        part2: 'Backbone'
      };

      return Item;

    })(Backbone.Model);
    window.List = (function(_super) {
      __extends(List, _super);

      function List() {
        _ref1 = List.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      List.prototype.localStorage = new Backbone.LocalStorage("ListStorage");

      List.prototype.model = Item;

      return List;

    })(Backbone.Collection);
    window.Quote = (function(_super) {
      __extends(Quote, _super);

      function Quote() {
        _ref2 = Quote.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      return Quote;

    })(Backbone.Model);
    window.QuoteList = (function(_super) {
      __extends(QuoteList, _super);

      function QuoteList() {
        _ref3 = QuoteList.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      QuoteList.prototype.model = Quote;

      QuoteList.prototype.url = "lib/quotes/quotes.json";

      QuoteList.prototype.initialize = function() {
        return this.fetch();
      };

      return QuoteList;

    })(Backbone.Collection);
    window.ItemView = (function(_super) {
      __extends(ItemView, _super);

      function ItemView() {
        this.unrender = __bind(this.unrender, this);
        this.render = __bind(this.render, this);        _ref4 = ItemView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      ItemView.prototype.tagName = 'li';

      ItemView.prototype.initialize = function() {
        _.bindAll(this);
        this.model.bind('change', this.render);
        return this.model.bind('remove', this.unrender);
      };

      ItemView.prototype.render = function() {
        console.log(list_view.collection.localStorage.find(this.model));
        if (list_view.collection.localStorage.find(this.model) !== null) {
          $(this.el).html("<span>" + (this.model.get('part1')) + " " + (this.model.get('part2')) + "!</span>\n<span class=\"swap\">swap</span>\n<span class=\"delete\">delete</span>");
        } else {
          $(this.el).html("<span>" + (this.model.get('part1')) + " " + (this.model.get('part2')) + "!</span>\n<span class=\"swap\">swap</span>\n<span class=\"save\">save</span>\n<span class=\"delete\">delete</span>");
        }
        return this;
      };

      ItemView.prototype.unrender = function() {
        return $(this.el).remove();
      };

      ItemView.prototype.swap = function() {
        return this.model.set({
          part1: this.model.get('part2'),
          part2: this.model.get('part1')
        });
      };

      ItemView.prototype.remove = function() {
        if (list_view.collection.localStorage.find(this.model) !== null) {
          list_view.collection.localStorage.destroy(this.model);
          return this.unrender();
        } else {
          return this.model.destroy();
        }
      };

      ItemView.prototype.save = function() {
        this.model.set({
          part2: "" + (this.model.get('part2')) + " saved in " + (new Date())
        });
        return this.model.save();
      };

      ItemView.prototype.events = {
        'click .swap': 'swap',
        'click .delete': 'remove',
        'click .save': 'save'
      };

      return ItemView;

    })(Backbone.View);
    window.ListView = (function(_super) {
      __extends(ListView, _super);

      function ListView() {
        _ref5 = ListView.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      ListView.prototype.el = $('body');

      ListView.prototype.initialize = function() {
        _.bindAll(this);
        this.collection = new List;
        this.quotes = new QuoteList;
        this.collection.bind('add', this.appendItem);
        this.counter = 0;
        return this.render();
      };

      ListView.prototype.render = function() {
        $(this.el).append('<button>Add List Item</button>');
        return $(this.el).append('<ul></ul>');
      };

      ListView.prototype.addItem = function() {
        var item;

        this.counter++;
        item = new Item;
        item.set({
          part2: "" + (item.get('part2')) + " " + this.counter
        });
        return this.collection.add(item);
      };

      ListView.prototype.appendItem = function(item) {
        var item_view;

        item_view = new ItemView({
          model: item
        });
        $('ul').append(item_view.render().el);
        if (this.counter > 0 && this.counter < 7) {
          return $('#quotes').text(this.quotes.at(this.counter).get('text'));
        }
      };

      ListView.prototype.events = {
        'click button': 'addItem'
      };

      return ListView;

    })(Backbone.View);
    window.list_view = new ListView;
    list_view.collection.fetch();
    return list_view.collection.reset(list_view.collection.toJSON());
  });

}).call(this);
