// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    var _ref, _ref1, _ref2, _ref3, _ref4;

    window.Item = (function(_super) {
      __extends(Item, _super);

      function Item() {
        _ref = Item.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Item.prototype.defaults = {
        part1: 'Hello',
        part2: 'Backbone'
      };

      return Item;

    })(Backbone.Model);
    window.List = (function(_super) {
      __extends(List, _super);

      function List() {
        _ref1 = List.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      List.prototype.model = Item;

      return List;

    })(Backbone.Collection);
    window.Quote = (function(_super) {
      __extends(Quote, _super);

      function Quote() {
        _ref2 = Quote.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      Quote.prototype.defaults = {
        text: "for the docs?"
      };

      return Quote;

    })(Backbone.Model);
    window.QuoteList = (function(_super) {
      __extends(QuoteList, _super);

      function QuoteList() {
        _ref3 = QuoteList.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      QuoteList.prototype.model = Quote;

      QuoteList.prototype.url = "lib/quotes/quotes.json";

      return QuoteList;

    })(Backbone.Collection);
    window.ListView = (function(_super) {
      __extends(ListView, _super);

      function ListView() {
        _ref4 = ListView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      ListView.prototype.el = $('body');

      ListView.prototype.initialize = function() {
        _.bindAll(this);
        this.collection = new List;
        this.collection.bind('add', this.appendItem);
        this.collection.bind('remove', this.removeItem);
        console.log(this.removeItem);
        this.quotes = new QuoteList;
        this.quotes.fetch();
        this.counter = 0;
        return this.render();
      };

      ListView.prototype.render = function() {
        $(this.el).append('<button id="addButton">Add List Item</button>');
        $(this.el).append('<button id="removeButton">Remove List Item</button>');
        return $(this.el).append('<ul><li>Hello, Backbone! </li></ul>');
      };

      ListView.prototype.addItem = function() {
        var item;

        console.log(this.quotes.at(this.counter).get('quote'));
        this.counter++;
        item = new Item;
        item.set({
          part2: "" + (item.get('part2')) + " " + this.counter
        });
        return this.collection.add(item);
      };

      ListView.prototype.deleteItem = function() {
        var item;

        this.counter--;
        item = this.collection.last();
        return this.collection.remove(item);
      };

      ListView.prototype.appendItem = function(item) {
        $('ul').append("<li>" + (item.get('part1')) + " " + (item.get('part2')) + "</li>");
        return $('#quotes').text(this.quotes.at(this.counter).get('quote'));
      };

      ListView.prototype.removeItem = function() {
        $('li:last-child').remove();
        return console.log($('li:last-child'));
      };

      ListView.prototype.events = {
        'click button#addButton': 'addItem',
        'click button#removeButton': 'deleteItem'
      };

      return ListView;

    })(Backbone.View);
    return window.list_view = new ListView;
  });

}).call(this);
